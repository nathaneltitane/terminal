#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -z "${TERMUX_VERSION}" ]
then
	PREFIX="/usr"
fi

if [[ -z $(command -v frobulator) ]]
then
	curl -s -L get.frbltr.app > "${PREFIX}"/bin/frobulator
fi

. "${PREFIX}"/bin/frobulator

if [[ $(id -u -n) = "root" ]]
then
	USER="${SUDO_USER}"
	HOME=/home/"${USER}"
fi

# adb //////////////////////////////////////////////////////////////////////////

adb_download () {
	if [[ -z $(command -v adb) ]]
	then
		files_list+=(
			adb
			fastboot
			e2fsdroid
			f2fs_sload
			make_f2fs
		)

		frobulator.download get.trmnl.me/android "${PREFIX}"/bin ${files_list[@]}

		files_list=()
	fi
}

adb_set_environment () {
	if [[ $(command -v adb) ]]
	then
		export ANDROID_NO_USE_FWMARK=1

		if [ ! -d "${HOME}"/.adb ]
		then
		    mkdir -p "${HOME}"/.adb
		fi

		export ADB_SERVER_SOCKET=localfilesystem:"${HOME}"/.adb/adb_server_socket
	fi
}


adb_creenshot () {
	adb_download

	adb_set_environment

	adb shell screencap -p /sdcard/"${screenshot}"

	adb pull /sdcard/"${screenshot}" screenshot/"${screenshot}"

	adb shell rm /sdcard/"${screenshot}"
}


adb_record () {
	adb_download

	adb_set_environment

	adb shell screenrecord /storage/emulated/0/Videos/"${recording}" &

	adb_record_PID=$!

	read -r -p 'Press enter to stop recording...'

	kill ${adb_record_PID} > /dev/null 2&>1

	sleep 0.5

	adb pull /sdcard/"${recording}" screenrecord/"${recording}"

	adb shell rm /sdcard/"${recording}"
}

adb_pull_package () {
	adb_download

	adb_set_environment

	if [[ ! -d ./apk ]]
	then
		mkdir -p "${HOME}"/Android

		cd "${HOME}"/Android
	fi

	for package in $(adb shell pm list packages | sed -n 's/^package://p')
	do
		adb pull "$(adb shell pm path "${package}" | grep /data/app | sed -n "s/^package://p")"

		mv base.apk "${package}".apk
	done
}

adb_install_package () {
	adb_download

	adb_set_environment

	package="${1}"

	adb install "${package}"
}

adb_remove_package () {
	adb_download

	adb_set_environment

	package="${1}"

	adb uninstall --user 0 "${package}"
}

adb_settings_get () {
	adb_download

	adb_set_environment

	setting="${1}"

	adb shell settings get "${setting}"
}

adb_settings_put () {
	adb_download

	adb_set_environment

	setting="${1}"

	adb shell settings put "${setting}"
}

adb_disable_phantom_killer () {
	adb_download

	adb_set_environment

	adb	shell /system/bin/device_config set_sync_disabled_for_tests persistent
	adb shell /system/bin/device_config put activity_manager max_phantom_processes 2000000000
	adb shell /system/bin/settings get global device_config_sync_disabled
}

adb_vendor_ids () {
	adb_download

	adb_set_environment

	mkdir -p ${HOME}"/.android

	for id in {0..65535}
	do
		printf '0x%04x\n' "${id}"
	done >> "{HOME}"/.android/adb_usb.ini

	chmod -R 777 ${HOME}"/.android

	if [[ $(dpkg -l udev) ]]
	then
		while read -r vendor_id
		do
			echo SUBSYSTEM=='"usb"', SYSFS{idVendor}=="\"${vendor_id:2}\"", MODE='"0666"';
		done <<< $(cat "${HOME}"/.android/adb_usb.ini) >> /etc/udev/rules.d/51-android.rules
	fi
}

adb_keycode () {
	adb_download

	adb_set_environment

	adb "${device}" shell input keyevent "${1}"

	# https://developer.android.com/reference/android/view/KeyEvent.html

	#  0 - KEYCODE_0              # 49 - KEYCODE_U
	#  1 - KEYCODE_SOFT_LEFT      # 50 - KEYCODE_V
	#  2 - KEYCODE_SOFT_RIGHT     # 51 - KEYCODE_W
	#  3 - KEYCODE_HOME           # 52 - KEYCODE_X
	#  4 - KEYCODE_BACK           # 53 - KEYCODE_Y
	#  5 - KEYCODE_CALL           # 54 - KEYCODE_Z
	#  6 - KEYCODE_ENDCALL        # 55 - KEYCODE_COMMA
	#  7 - KEYCODE_0              # 56 - KEYCODE_PERIOD
	#  8 - KEYCODE_1              # 57 - KEYCODE_ALT_LEFT
	#  9 - KEYCODE_2              # 58 - KEYCODE_ALT_RIGHT
	# 10 - KEYCODE_3              # 59 - KEYCODE_SHIFT_LEFT
	# 11 - KEYCODE_4              # 60 - KEYCODE_SHIFT_RIGHT
	# 12 - KEYCODE_5              # 61 - KEYCODE_TAB
	# 13 - KEYCODE_6              # 62 - KEYCODE_SPACE
	# 14 - KEYCODE_7              # 63 - KEYCODE_SYM
	# 15 - KEYCODE_8              # 64 - KEYCODE_EXPLORER
	# 16 - KEYCODE_9              # 65 - KEYCODE_ENVELOPE
	# 17 - KEYCODE_STAR           # 66 - KEYCODE_ENTER
	# 18 - KEYCODE_POUND          # 67 - KEYCODE_DEL
	# 19 - KEYCODE_DPAD_UP        # 68 - KEYCODE_GRAVE
	# 20 - KEYCODE_DPAD_DOWN      # 69 - KEYCODE_MINUS
	# 21 - KEYCODE_DPAD_LEFT      # 70 - KEYCODE_EQUALS
	# 22 - KEYCODE_DPAD_RIGHT     # 71 - KEYCODE_LEFT_BRACKET
	# 23 - KEYCODE_DPAD_CENTER    # 72 - KEYCODE_RIGHT_BRACKET
	# 24 - KEYCODE_VOLUME_UP      # 73 - KEYCODE_BACKSLASH
	# 25 - KEYCODE_VOLUME_DOWN    # 74 - KEYCODE_SEMICOLON
	# 26 - KEYCODE_POWER          # 75 - KEYCODE_APOSTROPHE
	# 27 - KEYCODE_CAMERA         # 76 - KEYCODE_SLASH
	# 28 - KEYCODE_CLEAR          # 77 - KEYCODE_AT
	# 29 - KEYCODE_A              # 78 - KEYCODE_NUM
	# 30 - KEYCODE_B              # 79 - KEYCODE_HEADSETHOOK
	# 31 - KEYCODE_C              # 80 - KEYCODE_FOCUS
	# 32 - KEYCODE_D              # 81 - KEYCODE_PLUS
	# 33 - KEYCODE_E              # 82 - KEYCODE_MENU
	# 34 - KEYCODE_F              # 83 - KEYCODE_NOTIFICATION
	# 35 - KEYCODE_G              # 84 - KEYCODE_SEARCH
	# 36 - KEYCODE_H              # 85 - KEYCODE_MEDIA_PLAY_PAUSE
	# 37 - KEYCODE_I              # 86 - KEYCODE_MEDIA_STOP
	# 38 - KEYCODE_J              # 87 - KEYCODE_MEDIA_NEXT
	# 39 - KEYCODE_K              # 88 - KEYCODE_MEDIA_PREVIOUS
	# 40 - KEYCODE_L              # 89 - KEYCODE_MEDIA_REWIND
	# 41 - KEYCODE_M              # 90 - KEYCODE_MEDIA_FAST_FORWARD
	# 42 - KEYCODE_N              # 91 - KEYCODE_MUTE
	# 43 - KEYCODE_O              # 92 - KEYCODE_PAGE_UP
	# 44 - KEYCODE_P              # 93 - KEYCODE_PAGE_DOWN
	# 45 - KEYCODE_Q              # 94 - KEYCODE_PICTSYMBOLS
	# 46 - KEYCODE_R              # [ ... ]
	# 47 - KEYCODE_S              # 122  KEYCODE_MOVE_HOME
	# 48 - KEYCODE_T              # 123  KEYCODE_MOVE_END
}

adb_device () {
	adb_download

	adb_set_environment

	if [ $# -gt 1 ]
	then
		device="-s ${@:2}"

		adb connect ${@:2}

		sleep 2
	fi
}

adb_write () {
	adb_download

	adb_set_environment

	hostname=$(adb ${device} shell getprop net.hostname)

	write_command"${@}"

	echo ${write_command@Q} | sed "s/ /%s/g" | xargs -0 adb "${device}" shell input text

	# enter

	adb_keycode 66

	# sleep for consecutive writes

	sleep 0.125
}

adb_reset_apk () {
	adb_download

	adb_set_environment

	application="${1}"
	activity="${2}"

	adb "${device}" shell	\
		pm clear "${application}"

	adb "${device}" shell	\
		am start			\
			--user 0		\
			-n "${application}"/"${application}"."${activity}"
}

# address //////////////////////////////////////////////////////////////////////

address () {
	frobulator.require curl

	echo

	curl -s -L ipinfo.io/ip

	echo
}

# audio ////////////////////////////////////////////////////////////////////////

audio () {
	frobulator.require ffmpeg

	directory="${PWD}"
	extension="${1}"

	if [ "${extension}" = "flac" ]
	then
		codec_option="-b:a 320k"
	else
		codec_option="-acodec copy"
	fi

	for file in $(find "${directory}" -type f -iname "*.${extension}")
	do
		ffmpeg					\
			-i "${file}"		\
			"${codec_option}"	\
			-map_metadata 0		\
			-id3v2_version 3	"${file%.*}.mp3"
	done
}

# colors ///////////////////////////////////////////////////////////////////////

colors () {
	list=(
		tput
		printf
	)

	frobulator.require ${list[@]}

	# print palette

	for foreground_color in {0..7}
	do
		set_foreground=$(tput setaf "${foreground_color}")

		for background_color in {0..7}
		do
			set_background=$(tput setab "${background_color}")

			echo -n "${set_background} ${set_foreground}"

			printf 'F:%s B:%s ' "${foreground_color}" "${background_color}"
		done

		# reset

		echo $(tput sgr0)
	done

	echo
}

hex () {
	frobulator.require printf

	IFS='(,)'

	read _ r g b <<< "${1}"

	printf '%02x%02x%02x\n' ${r} ${g} ${b}
}

rgb () {
	frobulator.require printf

	read hex <<< "${1}"

	[[ ${hex:0:1} = "#" ]] && hex=${hex:1:6}

	r=$((16#${hex:0:2}))
	g=$((16#${hex:2:2}))
	b=$((16#${hex:4:2}))

	printf '%03d %03d %03d\n' ${r} ${g} ${b}
}

# directory ////////////////////////////////////////////////////////////////////

directory () {
	frobulator.require mkdir

	mkdir -p "${1}"

	cd "${1}"
}

# duplicate ////////////////////////////////////////////////////////////////////

duplicate () {
	frobulator.require dd

	dd				\
		if="${1}"	\
		of="${2}"	\
		bs="${3}"	\
		status=progress
}

# extract //////////////////////////////////////////////////////////////////////

extract () {
	list=(
		tar
		bunzip2
		unrar
		gunzip
		unzip
		uncompress
		7z
	)

	frobulator.require ${list[@]}

	archive="${1}"
	directory="${2}"

	if [ -z "${directory}" ]
	then
		directory="${PWD}"
	fi

	if [ ! -d "${directory}" ]
	then
		mkdir -p "${directory}"
	fi

	if [ -f "${archive}" ]
	then
		case "${archive}"
		in
			*.tar.bz2|*.tbz2)
				tar						\
					--extract			\
					--bzip2				\
					--file="${archive}" \
					--directory="${directory}"
			;;

			*.tar.gz|*.tgz)
				tar						\
					--extract			\
					--gzip				\
					--file="${archive}" \
					--directory="${directory}"
			;;

			*.tar)
				tar						\
					--extract			\
					--file="${archive}" \
					--directory="${directory}"
			;;

			*.bz2)
				bzip					\
					--stdout			\
					--keep				\
					--decompress "${archive}" > "${directory}"
			;;

			*.gz)
				gzip					\
					--stdout			\
					--keep				\
					--decompress "${archive}" > "${directory}"
			;;

			*.Z)
				uncompress 				\
					--stdout 			\
					--keep "${archive}" > "${directory}"
			;;

			*.7z)
				7z x "${archive}" -o "${directory}"
			;;

			*.rar)
				unrar e "${archive}" "${directory}"
			;;

			*.zip)
				unzip "${archive}" -d "${directory}"
			;;

			*)
				echo
				frobulator.err "Extraction failed" "[ '${archive}' ]"
				echo
			;;
		esac
	else
		echo
		frobulator.err "Unsupported archive type" "[ '${archive}' ]"
		echo
	fi
}

# icons ////////////////////////////////////////////////////////////////////////

icons () {
	frobulator.require gtk-update-icon-cache

	icons_directory_list=(
		"${HOME}"/.icons
		"${PREFIX}"/share/icons
		/usr/share/icons
	)

	for icons_directory in ${icons_directory_list[@]}
	do
		if [ -d "${icons_directory}" ]
		then
			cd "${icons_directory}"
		fi

		if [ -d "${icons_directory}" ]
		then
			find "${icons_directory}" -mindepth 1 -maxdepth 1 -type d | while read -r theme
			do
				if [ -f "${theme}"/index.theme ]
				then
					theme_name="${theme##*/}"

					gtk-update-icon-cache -f -q "${theme}"

					frobulator.scs "Cache update success" "[ ${theme_name} ]"
					echo
				else
					frobulator.wrn "Skipping" "[ ${theme_name} ]"
					echo
				fi
			done
		fi
	done
}

# record #

record () {
	frobulator.require recordmydesktop

	[ -f "${HOME}"/Videos ] && path="${HOME}"/Videos || path="${HOME}"

	stamp="$(date +"%m-%d-%Y-%H-%M-%S")"
	window_id="$(xwininfo | grep "Window id" | cut -d ' ' -f 4)"

	wmctrl -i -R "${window_id}"

	frobulator.wait 1

	recordmydesktop								\
		--no-cursor								\
		--no-wm-check							\
		--no-sound								\
		--overwrite								\
		--windowid "${window_id}"				\
		--output="${path}"/clip-"${stamp}".ogv
}

# size #

size () {
	echo "W: $(tput cols) x H: $(tput lines)"
}

# sprunge #

sprunge () {
	url="http://sprunge.us"

	if (($#))
	then
		curl -F 'sprunge=<-' "${url}" < "${1}"
	else
		curl -F 'sprunge=<-' "${url}"
	fi
}

# terminate

terminate () {
	process_name="${1}"

	if [[ $(command -v pgrep) ]] && [[ $(command -v pkill) ]]
	then
		while [[ $(pgrep -f "${process_name}") ]]
		do
			pkill "${process_name}"
		done
	fi
}

# weather #

weather () {
	echo

	curl -s wttr.in | head -n -2

	echo
}

# youtube #

youtube () {
	if [[ -z $(command -v youtube-dl) ]]
	then
		frobulator.download https://yt-dl.org/downloads/latest "${PREFIX}"/bin youtube-dl
	fi

	path="${2}"

	[ -z "${path}" ] && path="${PWD}"

	cd "${path}" || exit 1

	youtube-dl												\
		--ignore-errors										\
		--yes-playlist										\
		--extract-audio										\
		--format			bestaudio						\
		--audio-format		mp3								\
		--audio-quality		160K							\
		--output			"%(title)s.%(ext)s"				\
															"${1}"
}
