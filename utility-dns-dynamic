#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="04-26-2025"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

# variables ////////////////////////////////////////////////////////////////////

configuration=/media/internal/.dns-dynamic

use=$(cat /media/internal/.dns-dynamic | sed -n 1p)
protocol=$(cat /media/internal/.dns-dynamic | sed -n 2p)
server=$(cat /media/internal/.dns-dynamic | sed -n 3p)

login=$(cat /media/internal/.dns-dynamic | sed -n 4p)
password=$(cat /media/internal/.dns-dynamic | sed -n 5p)

process="ddclient"
service="${process}.service"

web="www"
hostname="${HOSTNAME}"

# defaults /////////////////////////////////////////////////////////////////////

list=(
	ddclient
)

frobulator.require ${list[@]}

list=()

# functions ////////////////////////////////////////////////////////////////////

if [ ! -e "${configuration}" ]
then
	frobulator.err "Configuration file not found" "[ ${configuration} ]"
	echo

	frobulator.fwd "Aborting"
	echo

	exit 1
fi

# write ddclient configuration

cat <<- FILE > /etc/"${process}".conf
# ddclient #

daemon=300                                  # check every 5 minutes
syslog=yes                                  # log update messages to syslog
mail-failure=root                           # mail failed updates to user
pid=/var/run/ddclient.pid                   # record PID to file
ssl=yes                                     # use ssl
cache=/var/cache/ddclient/ddclient.cache    # set cache file

use=${use}
protocol=${protocol}
server=${server}

login=${login}
password=${password}

${web}
${hostname}
FILE

# reconfigure prccess handlers

sed -i -e 's|\PIDFile|#PIDFile|g' /usr/lib/systemd/system/"${process}".service

# purge service cache file

if [ -d /var/cache/"${process}" ]
then
	rm					\
		--recursive		\
		--force			 /var/cache/"${process}"/"${process}".cache
fi

# service activation

if [[ $(systemctl status "${service}" 2>&1 > "${sink}") ]]
then
	frobulator.wrn "Service running" " [ ${service} ]"
	echo

	service_actions_list=(
		disable
		stop
	)
fi

service_actions_list+=(
	enable
	start
)

for service_action in ${service_actions_list[@]}
do
	systemctl "${service_action}" "${service}" > "${sink}" 2>&1 &

	frobulator.process "Service ${service_action}" "[ ${service} ]"

	sleep 1

	systemctl daemon-reload > "${sink}" 2>&1 &

	frobulator.process "Reloading"

	sleep 1
done

service_actions_list=()

# service process verification

if [[ $(systemctl status "${service}" | grep -e "active.*running") ]]
then
	frobulator.scs "Service activation success" "[ ${service} ]"
	echo

elif [[ $(systemctl status "${service}" | grep -e "inactive.*") ]]
then
	frobulator.err "Service activation failed" "[ ${service} ]"
	echo

	exit 1
fi

frobulator.scs "Done"
