#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="11-09-2024"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

service="rclone-google-drive"

service_timer="${service}.timer"
service_service="${service}.service"

service_interval="5"

cloud_service="google drive"

cloud_server_directory="Google:"
local_server_directory="/media/internal"

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

list=(
	rclone
	rclone-browser
)

frobulator.require "${list[@]}"

list=()

# configuration

if [ -d /media/[iI]nternal/[rR][cC]lone ]
then
	if [ -f /media/[iI]nternal/[rR][cC]lone/rclone.conf ]
	then
		frobulator.inf "Linking configuration"
		echo

		frobulator.directory "${HOME}" .config/rclone

		frobulator.link /media/[iI]nternal/[rR][cC]lone/ "${HOME}"/.config/rclone rclone.conf
	fi
fi

# script

cat <<- FILE > "${HOME}"/.local/bin/"${service}"
#!/bin/bash

# variables ////////////////////////////////////////////////////////////////////

cloud_server_directory="${cloud_server_directory}"
local_server_directory="${local_server_directory}"

# functions ////////////////////////////////////////////////////////////////////

rclone_transfer () {

${TAB}rclone=$(command -v rclone)

${TAB}streams="16"

${TAB}synchronization_option="\${1}"

${TAB}source="\${2}"
${TAB}destination="\${3}"

${TAB}exclude="\${4}"

${TAB}unset transfer_command

${TAB}transfer_command+="\${rclone}"
${TAB}transfer_command+=" \${synchronization_option}"
${TAB}transfer_command+=" \${source}"
${TAB}transfer_command+=" \${destination}"
${TAB}transfer_command+=" --create-empty-src-dirs"
${TAB}transfer_command+=" --drive-skip-gdocs"

${TAB}if [ ! -z "\${4}" ]
${TAB}then
${TAB}${TAB}exclude="/\${exclude}/**"

${TAB}${TAB}transfer_command+=" --exclude \${exclude}"
${TAB}fi

${TAB}transfer_command+=" --multi-thread-streams \${streams}"
${TAB}transfer_command+=" --progress"
${TAB}transfer_command+=" --verbose"

${TAB}eval \${transfer_command}
}

# batch directory management

# set IFS

IFS=\$'\\n'

server_directories_list=(
${TAB}\$(find "\${local_server_directory}"	\\
${TAB}${TAB}-mindepth 1						\\
${TAB}${TAB}-maxdepth 1						\\
${TAB}${TAB}-type d							\\
${TAB}${TAB}! -iname "*.Trash*"				\\
${TAB}${TAB}! -iname "*Git*"				\\
${TAB}${TAB}! -iname "*Music*"				\\
${TAB})
)

# unset IFS

IFS=''

for server_directory in \${server_directories_list[@]}
do
${TAB}server_directory=\${server_directory##*/}

${TAB}# synchronize:
${TAB}# local machine >>> ${cloud_service}

${TAB}echo "Synchronizing: " "\${server_directory}"
${TAB}echo

${TAB}rclone_transfer sync "\${local_server_directory}/\${server_directory}" "\${cloud_server_directory}/\${server_directory}"

${TAB}# copy:
${TAB}# ${cloud_service} >>> local machine

${TAB}echo "Copying: " "\${server_directory}"
${TAB}echo

${TAB}rclone_transfer copy "\${cloud_server_directory}/\${server_directory}" "\${local_server_directory}/\${server_directory}"

done

# unset directory list

server_directories_list=()

# individual directory management

echo "Synchronizing: " "Git"
echo

local_server_directory="${local_server_directory}"

rclone_transfer sync "\${local_server_directory}/Git" "\${cloud_server_directory}/Git"

echo "Synchronizing: " "Music"
echo

local_server_directory="/media/nathanel/Samsung${SPC}T7"
server_directory="/Music/BASIL${SPC}O'GLUE"

rclone_transfer sync "\${local_server_directory}/\${server_directory}" "\${cloud_server_directory}/\${server_directory}"

local_server_directory="/media/nathanel/Samsung${SPC}T7"
server_directory="/Music/STEYOYOKE"

rclone_transfer sync "\${local_server_directory}/\${server_directory}" "\${cloud_server_directory}/\${server_directory}"

local_server_directory="/media/nathanel/Samsung${SPC}T7"
server_directory="/Music/INNER${SPC}SYMPHONY"

rclone_transfer sync "\${local_server_directory}/\${server_directory}" "\${cloud_server_directory}/\${server_directory}"
FILE

# permissions

chmod +x "${HOME}"/.local/bin/"${service}"

# service

frobulator.directory "${HOME}" .config/systemd/user

# service timer

cat <<- 'FILE' > "${HOME}"/.config/systemd/user/"${service_timer}"
[Unit]
Description=RClone Google Drive synchronization

[Timer]
OnCalendar=*:0/05
Persistent=true

[Install]
WantedBy=timers.target
FILE

# service desciptor

cat <<- FILE > "${HOME}"/.config/systemd/user/"${service_service}"
[Unit]
Description=Synchronize Google Drive using RClone every 5 minutes

[Service]
ExecStart=${SHELL} ${HOME}/.local/bin/${service}
FILE

# service activation

if [[ $(systemctl status --user "${service_timer}") ]]
then
	service_actions_list=(
		disable
		stop

	)

	service_action_message="Stopping service"
fi

service_actions_list=()

service_actions_list=(
	enable
	start
)

service_action_message="Starting service"

for service_action in ${service_actions_list[@]}
do
	systemctl "${service_action}" --user "${service_timer}" > "${sink}" 2>&1 &

	frobulator.process "${service_action_message}"

	systemctl --user daemon-reload > "${sink}" 2>&1 &

	frobulator.process "Reloading"
done

# service process verification

if [[ $(systemctl status --user "${service_service}" | grep "active") ]]
then
	frobulator.scs "Service activation success" "[ ${service} ]"
	echo
else
	frobulator.err "Service activation failed" "[ ${service} ]"
	echo

	exit 1
fi

frobulator.scs "Done"
