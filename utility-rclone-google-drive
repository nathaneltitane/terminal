#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="01-21-2024"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

process="rclone-google-drive"
service="${process}.service"

cloud_service="google drive"

cloud_server_directory="Google:"
local_server_directory="/media/internal"

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

list=(
	rclone
	rclone-browser
)

frobulator.require "${list[@]}"

list=()

# configuration

if [ -d /media/[iI]nternal/[rR][cC]lone ]
then
	if [ -f /media/[iI]nternal/[rR][cC]lone/rclone.conf ]
	then
		frobulator.inf "Linking configuration"
		echo

		frobulator.directory "${HOME}" .config/rclone

		frobulator.link /media/[iI]nternal/[rR][cC]lone/ "${HOME}"/.config/rclone rclone.conf
	fi
fi

# script

cat <<- FILE > "${HOME}"/.local/bin/"${process}"
#!/bin/bash

# variables ////////////////////////////////////////////////////////////////////

cloud_server_directory="Google:"
local_server_directory="/media/internal"

run_count_tracker="\${HOME}"/.local/bin/rclone-google-drive-run-count

# functions ////////////////////////////////////////////////////////////////////

rclone_transfer () {

${TAB}rclone=/usr/bin/rclone

${TAB}checkers="64"
${TAB}max_lock="120"
${TAB}modify_window="1"
${TAB}streams="16"
${TAB}transfers="32"

${TAB}synchronization_option="\${1}"

${TAB}source="\${2}"
${TAB}destination="\${3}"

${TAB}transfer_command=()

${TAB}transfer_command+=(\${rclone})
${TAB}transfer_command+=(\${synchronization_option})
${TAB}transfer_command+=(\${source})
${TAB}transfer_command+=(\${destination})
${TAB}transfer_command+=(--compare size,modtime,checksum)
${TAB}transfer_command+=(--checkers \${checkers})
${TAB}transfer_command+=(--create-empty-src-dirs)
${TAB}transfer_command+=(--drive-acknowledge-abuse)
${TAB}transfer_command+=(--drive-skip-dangling-shortcuts)
${TAB}transfer_command+=(--drive-skip-gdocs)
${TAB}transfer_command+=(--drive-skip-shortcuts)
${TAB}transfer_command+=(--fix-case)
${TAB}transfer_command+=(--max-lock \${max_lock}s)
${TAB}transfer_command+=(--metadata)
${TAB}transfer_command+=(--modify-window \${modify_window}s)
${TAB}transfer_command+=(--multi-thread-streams \${streams})
${TAB}transfer_command+=(--recover)
${TAB}transfer_command+=(--track-renames)
${TAB}transfer_command+=(--transfers \${transfers})

${TAB}if [ "\${run_count}" = 0 ]
${TAB}then
${TAB}${TAB}transfer_command+=(--resync)
${TAB}fi

${TAB}transfer_command+=(--progress)
${TAB}transfer_command+=(--verbose)

${TAB}eval \${transfer_command[@]}
}

# batch directory management

# set IFS

IFS=\$'\n'

server_directories_list=(
${TAB}\$(find "\${local_server_directory}"	\\
${TAB}${TAB}-mindepth 1						\\
${TAB}${TAB}-maxdepth 1						\\
${TAB}${TAB}-type d							\\
${TAB}${TAB}! -iname "*.Trash*"				\\
${TAB})
)

run_count=0

echo "Run count: \${run_count}"
echo

# unset IFS

IFS=''

while true
do
${TAB}if [ -e "\${run_count_tracker}" ]
${TAB}then
${TAB}${TAB}run_count=\$(cat "\${run_count_tracker}")
${TAB}else
${TAB}${TAB}run_count=0
${TAB}fi

${TAB}echo "\${run_count}" > "\${run_count_tracker}"

${TAB}echo
${TAB}echo "Run start - count: \${run_count}"
${TAB}echo

${TAB}rclone_transfer bisync "\${cloud_server_directory}/" "\${local_server_directory}/" --max-depth 0 --exclude '*.Trash*'

${TAB}for server_directory in \${server_directories_list[@]}
${TAB}do
${TAB}${TAB}server_directory=\${server_directory##*/}

${TAB}${TAB}rclone_transfer bisync "\${cloud_server_directory}/\${server_directory}" "\${local_server_directory}/\${server_directory}"

${TAB}${TAB}wait

${TAB}${TAB}sleep 1

${TAB}done

${TAB}run_count=\$((run_count + 1))

${TAB}echo "\${run_count}" > "\${run_count_tracker}"

${TAB}echo
${TAB}echo "Run end - count: \${run_count}"
${TAB}echo

done

# unset directory list

server_directories_list=()
FILE

# permissions

chmod +x "${HOME}"/.local/bin/"${process}"

# service

frobulator.directory "${HOME}" .config/systemd/user

# service desciptor

cat <<- FILE > "${HOME}"/.config/systemd/user/"${service}"
[Unit]
Description=Synchronize Google Drive using RClone
After=graphical-session.target
Requires=graphical-session.target

[Service]
ExecStart=${SHELL} ${HOME}/.local/bin/${process}
Restart=always
RestartSec=1s
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=graphical-session.target
FILE

# service activation

if [[ $(systemctl status --user "${service}" 2>&1 > "${sink}") ]]
then
	frobulator.wrn "Service running" " [ ${service} ]"
	echo

	service_actions_list=(
		disable
		stop
	)
fi

service_actions_list+=(
	enable
	start
)

for service_action in ${service_actions_list[@]}
do
	systemctl "${service_action}" --user "${service}" > "${sink}" 2>&1 &

	frobulator.process "Service ${service_action}" "[ ${service} ]"

	sleep 1

	systemctl --user daemon-reload > "${sink}" 2>&1 &

	frobulator.process "Reloading"

	sleep 1
done

service_actions_list=()

# service process verification

if [[ $(systemctl status --user "${service}" | grep -e "active.*running") ]]
then
	frobulator.scs "Service activation success" "[ ${service} ]"
	echo

elif [[ $(systemctl status --user "${service}" | grep -e "inactive.*") ]]
then
	frobulator.err "Service activation failed" "[ ${service} ]"
	echo

	exit 1
fi

frobulator.scs "Done"
