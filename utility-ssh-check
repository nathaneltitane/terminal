#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	. "${HOME}"/.local/bin/frobulator

	frobulator.fwd "Updating..."
	echo

	rm -r -f "${HOME}"/.local/bin/frobulator
else
	echo -n -e "[ â–· ] Updating..."
	echo
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

# frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="04-12-2023"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

if [[ -t 1 ]]
	then
		# monochromatic colors

		white=$(tput setaf "${white}")
		silver=$(tput setaf "${silver}")
		grey=$(tput setaf "${grey}")
		black=$(tput setaf "${black}")

		# standard colors by saturation offset

		red=$(tput setaf "${red}")
		crimson=$(tput setaf "${crimson}")

		green=$(tput setaf "${green}")
		lime=$(tput setaf "${lime}")

		yellow=$(tput setaf "${yellow}")
		orange=$(tput setaf "${orange}")

		blue=$(tput setaf "${blue}")
		navy=$(tput setaf "${navy}")

		magenta=$(tput setaf "${magenta}")
		purple=$(tput setaf "${purple}")

		fuschia=$(tput setaf "${fuschia}")
		pink=$(tput setaf "${pink}")

		aqua=$(tput setaf "${aqua}")
		teal=$(tput setaf "${teal}")

		# reset all attributes

		reset=$(tput sgr 0)

		# 'tput' terminal control

		# full description of terminal capacity

		terminal_info=$(tput longname)

		# number of lines in terminal

		terminal_height=$(tput lines)

		# number of columns in terminal

		terminal_width=$(tput cols)

		# number of colors available

		terminal_colors=$(tput colors)

		# save cursor position of terminal

		terminal_save_cursor=$(tput sc)

		# restore cursor position of terminal

		terminal_restore_cursor=$(tput rc)

		# move cursor to upper left corner (0,0) - equivalent: 'tput cup 0 0'

		terminal_home_cursor=$(tput home)

		# move cursor to position (row, column)

		terminal_move_cursor=$(tput cup ${tput_row} ${tput_col})

		# move cursor down 1 row

		terminal_cursor_down=$(tput cud ${@})

		# move cursor up 1 row

		terminal_cursor_up=$(tput cuu ${@})

		# set cursor to invisible state

		terminal_cursor_hide=$(tput civis)

		# set cursor to normal state

		terminal_cursor_show=$(tput cnorm)

		# save screen contents

		terminal_save_screen=$(tput smcup)

		# restore screen contents

		terminal_restore_screen=$(tput rmcup)

		# clear from cursor to end of line - left

		terminal_clear_right=$(tput el1)

		# clear from cursor to beginning of line - right

		terminal_clear_left=$(tput el)

		# clear from cursor to end of the screen - down

		terminal_clear_down=$(tput ed)

		# clear entire screen and home cursor (0,0) - all

		terminal_clear_all=$(tput clear)
	fi
fi

frobulator.plo () {

	lines="${1:-1}"

	# validate input is a number

	if [[ "${lines}" =~ ^[0-9]+$ ]]
	then
		tput cuu "${lines}"
	else
		return 1
	fi

	unset lines
}

ssh_check () {

	timeout="0.25"
	lan="${1}"

	if [ -z "${lan}" ]
	then
		echo "Usage: ${FUNCNAME[0]} <LAN_PREFIX> (e.g., ${FUNCNAME[0]} 192.168.0 or 192.168.0.1)"
		return 1
	fi

	# extract and validate first 3 octets

	lan=$(
		echo "${lan}"								| \
			grep -Eo '^([0-9]{1,3}\.){2}[0-9]{1,3}'	| \
				awk -F'.' '
					$1 <= 255 && $2 <= 255 && $3 <= 255 {
						printf("%d.%d.%d.", $1, $2, $3)
					}'
	)

	if [ -z "${lan}" ]
	then
		frobulator.err "invalid ip format."
		return 1
	fi

	# split ip into individual octets

	IFS='.' read -r octet_01 octet_02 octet_03 <<< "${lan%?}"

	for octet_host in {1..255}
	do
		# ip used for networking

		ip_network="${octet_01}.${octet_02}.${octet_03}.${octet_host}"

		# ip used for informational display

		ip_display=$(printf "%03d.%03d.%03d.%03d" "${octet_01}" "${octet_02}" "${octet_03}" "${octet_host}")

		frobulator.fwd "Port scan" "[ ${ip_display} ]"
		echo -n ""

		timeout "${timeout}" "${SHELL}" -c "echo > /dev/tcp/${ip_network}/22" 2> "${sink}"

		if [ $? -eq 0 ]
		then
			list_port_open+=("${ip_display}")

			frobulator.plo

			frobulator.scs "Port open" "[ ${ip_display} ]"
			echo
		else
			frobulator.plo

			frobulator.err "Port closed" "[ ${ip_display} ]"
			echo
		fi

	done

	# unset IFS

	IFS=''

	if [ ${#list_port_open[@]} -gt 0 ]
	then
		if [ ${#list_port_open[@]} -eq 1 ]
		then
			message="Adress"

		elif [ ${#list_port_open[@]} -ge 2 ]
		then
			message="Adresses"
		fi

		frobulator.inf "${message} with open port found at:"
		echo

		for address in "${list_port_open[@]}"
		do
			echo "     ${address}"
		done

		echo
	else
		frobulator.wrn "No open addresses found"
		echo
	fi

}

ssh_check "${@}"
