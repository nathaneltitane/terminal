#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="05-27-2025"

# variables ////////////////////////////////////////////////////////////////////

current_display="${DISPLAY:-:0}"
current_display="${current_display##*:}"

virtual_display=":$((current_display + 1))"

configuration_file="10-virtual-monitor.conf"
configuration_directory="/etc/X11/xorg.conf.d"
configuration_path="${configuration_directory}"/"${configuration_file}"

process="virtual-monitor"
service="${process}.service"

launcher="${process}.sh"
launcher_directory="/usr/local/bin"
launcher_path="${launcher_directory}"/"${launcher}"

service_directory="/etc/systemd/system"
service_path="${service_directory}"/"${service}"

# requirements /////////////////////////////////////////////////////////////////

list=(
	x11-xserver-utils
	x11vnc
	xinit
	xserver-xorg-video-dummy
)

frobulator.require ${list[@]}

list=()

# configuration ////////////////////////////////////////////////////////////////

frobulator.fwd "Creating virtual X11 config"

mkdir -p "${configuration_directory}"

cat <<- FILE > "${configuration_path}"
Section "Monitor"
	Identifier "VirtualMonitor"
	HorizSync 28.0-80.0
	VertRefresh 48.0-75.0
	Modeline "2800x1752_60.00"  348.25  2800 2960 3248 3696  1752 1755 1765 1799 -hsync +vsync
	Option "PreferredMode" "2800x1752_60.00"
EndSection

Section "Device"
	Identifier "VirtualDevice"
	Driver "dummy"
	VideoRam 256000
EndSection

Section "Screen"
	Identifier "VirtualScreen"
	Device "VirtualDevice"
	Monitor "VirtualMonitor"
	DefaultDepth 24
	SubSection "Display"
		Depth 24
		Modes "2800x1752_60.00"
	EndSubSection
EndSection

Section "ServerLayout"
	Identifier "VirtualLayout"
	Screen "VirtualScreen"
EndSection
FILE

# launcher

frobulator.fwd "Creating launcher script" "[ ${launcher} ]"

cat <<- FILE > "${launcher}"
#!/bin/bash

virtual_display="${virtual_display}"

xinit -- /usr/bin/X "\${virtual_display}" -config "${configuration_path}" &
sleep 2

exec /usr/bin/x11vnc \\
	--display="\${virtual_display}" \\
	--rfbport=5900 \\
	--forever \\
	--shared \\
	--nopw \\
	--loop \\
	--repeat
FILE

chmod +x "${launcher}"

# systemd service

frobulator.fwd "Creating systemd service" "[ ${service} ]"

cat <<- FILE > "${service_path}"
[Unit]
Description=Virtual Monitor VNC Service
After=network.target

[Service]
Type=simple
ExecStart=${launcher}
Restart=always
RestartSec=5
User=root

[Install]
WantedBy=multi-user.target
FILE

# service activation

if [[ $(systemctl status "${service}" | grep -e "active.*running") ]]
then
	frobulator.wrn "Service running" " [ ${service} ]"
	echo

	service_actions_list=(
		disable
		stop
	)
fi

service_actions_list+=(
	enable
	start
)

for service_action in ${service_actions_list[@]}
do
	systemctl "${service_action}" "${service}" > "${sink}" 2>&1 &

	frobulator.process "Service ${service_action}" "[ ${service} ]"

	sleep 1

	systemctl daemon-reload > "${sink}" 2>&1 &

	frobulator.process "Reloading"

	sleep 1
done

service_actions_list=()

# service process verification

if [[ $(systemctl status "${service}" | grep -e "active.*running") ]]
then
	frobulator.scs "Service activation success" "[ ${service} ]"
	echo

elif [[ $(systemctl status "${service}" | grep -e "inactive.*") ]]
then
	frobulator.err "Service activation failed" "[ ${service} ]"
	echo

	exit 1
fi

frobulator.scs "Done"
