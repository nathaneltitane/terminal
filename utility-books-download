#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
		rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
		if [[ $(id -u -n) = "root" ]]
		then
				SUDO_HOME=/root

				USER="${SUDO_USER}"

				HOME=/home/"${USER}"
		fi

		if [[ -z $(command -v curl) ]]
		then
				yes | apt-get install curl
		fi

		if [ ! -d "${HOME}"/.local/bin ]
		then
				mkdir -p "${HOME}"/.local/bin
		fi

		curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

		chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

# frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="02-03-2025"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

api_url="https://gutendex.com/books"

# functions ////////////////////////////////////////////////////////////////////

selections () {

	frobulator.sep
	echo

	echo "    [ 1 ] [S]earch for a book           [ author | title | subject ]"
	echo "    [ 2 ] [G]et book details            [ id ]"
	echo "    [ 3 ] [D]ownload book(s) (epub)     [ id ]"
	echo
	echo "    [ 4 ] [E]xit"
	echo

	frobulator.sep
	echo

	frobulator.ipt "Selection"

}

string_sanitize () {

	string="${1}"

	echo "${string}" | tr -d '"|/\:;,!?*<>{}_' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//'
}

book_query () {

	frobulator.ipt "Enter search query [ author / title / subject ]"

	read -r query

	while [[ ! "${query}" =~ ^[A-Za-z0-9]+$ ]]
	do
		echo
		frobulator.err "Invalid input type:"
		echo

		frobulator.wrn "Alphanumeric characters only"
		echo

		frobulator.ipt "Enter search query [ author / title / subject ]"

		read -r query

	done

	echo

	# url encode space characters

	query=$(echo "${query}" | sed 's/ /%20/g')

		# Abkhazian / ab
	# Afar / aa
	# Afrikaans / af
	# Akan / ak
	# Albanian / sq
	# Amharic / am
	# Arabic / ar
	# Aragonese / an
	# Armenian / hy
	# Assamese / as
	# Avaric / av
	# Avestan / ae
	# Aymara / ay
	# Azerbaijani / az
	# Bambara / bm
	# Bashkir / ba
	# Basque / eu
	# Belarusian / be
	# Bengali / bn
	# Bislama / bi
	# Bosnian / bs
	# Breton / br
	# Bulgarian / bg
	# Burmese / my
	# Catalan, Valencian / ca
	# Chamorro / ch
	# Chechen / ce
	# Chichewa, Chewa, Nyanja / ny
	# Chinese / zh
	# Church&nbsp;Slavonic, Old&nbsp;Slavonic, Old&nbsp;Church&nbsp;Slavonic / cu
	# Chuvash / cv
	# Cornish / kw
	# Corsican / co
	# Cree / cr
	# Croatian / hr
	# Czech / cs
	# Danish / da
	# Divehi, Dhivehi, Maldivian / dv
	# Dutch, Flemish / nl
	# Dzongkha / dz
	# English / en
	# Esperanto / eo
	# Estonian / et
	# Ewe / ee
	# Faroese / fo
	# Fijian / fj
	# Finnish / fi
	# French / fr
	# Western Frisian / fy
	# Fulah / ff
	# Gaelic, Scottish&nbsp;Gaelic / gd
	# Galician / gl
	# Ganda / lg
	# Georgian / ka
	# German / de
	# Greek, Modern&nbsp;(1453–) / el
	# Kalaallisut, Greenlandic / kl
	# Guarani / gn
	# Gujarati / gu
	# Haitian, Haitian&nbsp;Creole / ht
	# Hausa / ha
	# Hebrew / he
	# Herero / hz
	# Hindi / hi
	# Hiri Motu / ho
	# Hungarian / hu
	# Icelandic / is
	# Ido / io
	# Igbo / ig
	# Indonesian / id
	# Interlingua (International Auxiliary Language Association) / ia
	# Interlingue, Occidental / ie
	# Inuktitut / iu
	# Inupiaq / ik
	# Irish / ga
	# Italian / it
	# Japanese / ja
	# Javanese / jv
	# Kannada / kn
	# Kanuri / kr
	# Kashmiri / ks
	# Kazakh / kk
	# Central Khmer / km
	# Kikuyu, Gikuyu / ki
	# Kinyarwanda / rw
	# Kyrgyz, Kirghiz / ky
	# Komi / kv
	# Kongo / kg
	# Korean / ko
	# Kuanyama, Kwanyama / kj
	# Kurdish / ku
	# Lao / lo
	# Latin / la
	# Latvian / lv
	# Limburgan, Limburger, Limburgish / li
	# Lingala / ln
	# Lithuanian / lt
	# Luba-Katanga / lu
	# Luxembourgish, Letzeburgesch / lb
	# Macedonian / mk
	# Malagasy / mg
	# Malay / ms
	# Malayalam / ml
	# Maltese / mt
	# Manx / gv
	# Maori / mi
	# Marathi / mr
	# Marshallese / mh
	# Mongolian / mn
	# Nauru / na
	# Navajo, Navaho / nv
	# North Ndebele / nd
	# South Ndebele / nr
	# Ndonga / ng
	# Nepali / ne
	# Norwegian / no
	# Norwegian Bokmål / nb
	# Norwegian Nynorsk / nn
	# Occitan / oc
	# Ojibwa / oj
	# Oriya / or
	# Oromo / om
	# Ossetian, Ossetic / os
	# Pali / pi
	# Pashto, Pushto / ps
	# Persian / fa
	# Polish / pl
	# Portuguese / pt
	# Punjabi, Panjabi / pa
	# Quechua / qu
	# Romanian, Moldavian, Moldovan / ro
	# Romansh / rm
	# Rundi / rn
	# Russian / ru
	# Northern Sami / se
	# Samoan / sm
	# Sango / sg
	# Sanskrit / sa
	# Sardinian / sc
	# Serbian / sr
	# Shona / sn
	# Sindhi / sd
	# Sinhala, Sinhalese / si
	# Slovak / sk
	# Slovenian / sl
	# Somali / so
	# Southern Sotho / st
	# Spanish, Castilian / es
	# Sundanese / su
	# Swahili / sw
	# Swati / ss
	# Swedish / sv
	# Tagalog / tl
	# Tahitian / ty
	# Tajik / tg
	# Tamil / ta
	# Tatar / tt
	# Telugu / te
	# Thai / th
	# Tibetan / bo
	# Tigrinya / ti
	# Tonga (Tonga Islands) / to
	# Tsonga / ts
	# Tswana / tn
	# Turkish / tr
	# Turkmen / tk
	# Twi / tw
	# Uighur, Uyghur / ug
	# Ukrainian / uk
	# Urdu / ur
	# Uzbek / uz
	# Venda / ve
	# Vietnamese / vi
	# Volapük / vo
	# Walloon / wa
	# Welsh / cy
	# Wolof / wo
	# Xhosa / xh
	# Sichuan Yi, Nuosu / ii
	# Yiddish / yi
	# Yoruba / yo
	# Zhuang, Chuang / za
	# Zulu / zu

	frobulator.ipt "Enter language - press Enter to skip [ en / fr / es / .. ]"

	read -r language

	echo

	if [ -n "${language}" ]
	then
		api_call="${api_url}/?search=${query}&languages=${language}"
	else
		api_call="${api_url}/?search=${query}"
	fi

	results=$(curl -s "${api_call}") &

	frobulator.process "Querying${marker_elp}"


# 	if [ -n "${language}" ]
# 	then
# 		search_results_last=(
# 			$(echo "${results}" | jq -r '.results[].id | select(.languages[] | contains("'"${language}"'"))')
# 		)
#
# 	else
# 		search_results_last=(
# 			$(echo "${results}" | jq -r '.results[].id')
# 		)
#
# 	fi

	count=$(curl -s "${api_call}" | jq -r '.count')

	if [ "${count}" -eq 0 ]
	then
		frobulator.err "Matches" "[ ${count} ]"
		echo
	else
		frobulator.scs "Matches" "[ ${count} ]"
		echo

		frobulator.sep
		echo

		curl -s "${api_call}" | jq -r '
				.results[] | select(.languages[] | contains("'"${language}"'")) |
				"Identifier: "      + (.id|tostring)                             + "\n" +
																			       "\n" +
				"    Title:       " + .title + "\n" +
				"    Author:      " + (.authors[].name // "Unknown")             + "\n" +
				"    Language:    " + (.languages | join(", "))                  + "\n" +
				"    Download:    " + (.formats."application/epub+zip" // "N/A") + "\n"
		'

		frobulator.sep
		echo

	fi
}

book_details () {

	frobulator.ipt "Enter book identifier:"

	read -r book_identifier

	while [[ ! "${book_identifier}" =~ ^[0-9]+$ ]]
	do
		echo
		frobulator.err "Invalid input type:"
		echo

		frobulator.wrn "Numeric characters only"
		echo

		frobulator.ipt "Enter book identifier:"

		read -r book_identifier

	done

	echo

	frobulator.fwd "Fetching details${marker_elp}"
	echo

	response=$(curl -s "${api_url}/${book_identifier}/")

	formats=$(echo "${response}" | jq -r '.formats | to_entries[] | "    " + "- " + (.key | sub("^application/"; "")) + "\t" + "\t[ " + .value + " ]"')

	curl -s "${api_url}${book_identifier}/" | jq -r '
			"Title:    " + .title + "\n" +
			"Author:   " + (.authors[].name // "Unknown") + "\n" +
			"Subjects: " + "\n" + "    - " + (.subjects | join("\n    - ")) + "\n"
	' &

	frobulato.inf "Available formats:"
	echo

	echo "${formats}"
}

book_download () {

	frobulator.ipt "Enter Book identifier(s) separated by spaces or type 'all' to download last query results:"
	echo

	read -r -a book_identifiers

	if [ "${book_identifiers[0]}" = "all" ]
	then
		if [ ${#search_results_last[@]} -eq 0 ]
		then
			frobulator.err "No previous search results stored or found."
			echo

			return
		fi

		book_identifiers=("${search_results_last[@]}")
	fi

	for book_identifier in "${book_identifiers[@]}"
	do
		frobulator.inf "Fetching book information" " [ ${book_identifier} ]"
		echo

		response=$(curl -s "${api_url}/${book_identifier}/")

		epub_url=$(echo "${response}" | jq -r '.formats."application/epub+zip"')

		title=$(echo "${response}" | jq -r '.title')
		author=$(echo "${response}" | jq -r '.authors[0].name')

		if [ "${epub_url}" = "null" ]
		then
			frobulator.err "No EPUB version available for book" "[ ${book_identifier} ]"
			echo

			continue
		fi

		author=$(string_sanitize "${author}")
		title=$(string_sanitize  "${title}")

		extension="epub"

		file="${author} - ${title}.${extension}"

		frobulator.fwd "Downloading" "[ ${file} ]"
		echo

		curl -s -L -o "${file}" "${epub_url}"

		frobulator.inf "Download complete" "[ ${file} ]"
		echo
	done
}


while true
do
	selections

	read -r selection

	echo

	case "${selection}"
	in
		1 | s | S )

			book_query
		;;

		2|g|G)

			book_details
		;;

		3|d|D)

			book_download
		;;

		4|e|E)

			exit
		;;

		*)
			echo "Invalid choice. Try again."
		;;

	esac
done
