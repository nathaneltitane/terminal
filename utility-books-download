#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
		rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
		if [[ $(id -u -n) = "root" ]]
		then
				SUDO_HOME=/root

				USER="${SUDO_USER}"

				HOME=/home/"${USER}"
		fi

		if [[ -z $(command -v curl) ]]
		then
				yes | apt-get install curl
		fi

		if [ ! -d "${HOME}"/.local/bin ]
		then
				mkdir -p "${HOME}"/.local/bin
		fi

		curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

		chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

# frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="02-03-2025"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

api_url="https://gutendex.com/books"

# functions ////////////////////////////////////////////////////////////////////

string_sanitize () {

	echo "${1}" | tr -d '"|/\:;,!?*<>{}_' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//'
}

book_query () {

	echo "Enter search query (title, author, or subject):"

	read -r query

	# url encode space characters

	query=$(echo "${query}" | sed 's/ /%20/g')

	echo "Enter language code (e.g., 'en' for English, 'fr' for French, press Enter to skip):"
	echo

	read -r language

	if [ -n "${language}" ]
	then
		api_call="${api_url}/?search=${query}&languages=${language}"
	else
		api_call="${api_url}/?search=${query}"
	fi

	frobulator.fwd "Fetching results${marker_elp}"
	echo

	results=$(curl -s "${api_call}")

	if [ -n "${language}" ]
	then
		search_results_last=(
			$(echo "${results}" | jq -r '.results[].id | select(.languages[] | contains("'"${language}"'"))')
		)

	else
		search_results_last=(
			$(echo "${results}" | jq -r '.results[].id')
		)

	fi

	curl -s "${api_call}" | jq -r -c '
			.results[] | select(.languages[] | contains("'"${language}"'")) |
			"ID " + (.id|tostring) + ":" + "\n" +
			"    Title: " + .title + "\n" +
			"    Author: " + (.authors[].name // "Unknown") + "\n" +
			"    Language: " + (.languages | join(", ")) + "\n" +
			"    Download: " + (.formats."application/epub+zip" // "N/A") + "\n"
	'
}

book_details () {

	echo "Enter Book ID:"

	read -r book_identifier

	frobulator.fwd "Fetching details${marker_elp}"
	echo

	response=$(curl -s "${api_url}/${book_identifier}/")

	formats=$(echo "$response" | jq -r '.formats | to_entries[] | "    " + "- " + (.key | sub("^application/"; "")) + "\t" + "\t[ " + .value + " ]"')

	curl -s "${api_url}${book_identifier}/" | jq -r '
			"Title: " + .title + "\n" +
			"Author: " + (.authors[].name // "Unknown") + "\n" +
			"Subjects: " + "\n" + "    - " + (.subjects | join("\n    - ")) + "\n"
	'

	echo "Available Formats:"
	echo

	echo "${formats}"
}

book_download () {

	frobulator.inf "Enter Book identifier(s) separated by spaces or type 'all' to download last query results:"
	echo

	read -r -a book_identifiers

	if [ "${book_identifiers[0]}" = "all" ]
	then
		if [ ${#search_results_last[@]} -eq 0 ]
		then
				frobulator.err "No previous search results stored or found."
				echo

				return
		fi

		book_identifiers=("${search_results_last[@]}")
	fi

	for book_identifier in "${book_identifiers[@]}"
	do
		frobulator.inf "Fetching book information" " [ ${book_identifier} ]"
		echo

		response=$(curl -s "${api_url}/${book_identifier}/")

		epub_url=$(echo "${response}" | jq -r '.formats."application/epub+zip"')

		title=$(echo "${response}" | jq -r '.title')
		author=$(echo "${response}" | jq -r '.authors[0].name')

		if [ "${epub_url}" = "null" ]
		then
			echo "No EPUB version available for Book ID: ${book_identifier}"

			continue
		fi

		author=$(string_sanitize "${author}")
		title=$(string_sanitize  "${title}")

		extension="epub"

		file="${author} - ${title}.${extension}"

		frobulator.inf "Downloading: ${file}..."
		echo

		curl -s -L -o "${file}" "${epub_url}"

		frobulator.inf "Download complete" "[ ${file} ]"
		echo
	done
}


while true
do
	echo
	echo "[ 1 ] Search for a book                  [ author | title | subject ]"
	echo "[ 2 ] Get book details                   [ id ]"
	echo "[ 3 ] Download book(s) (epub format)     [ id ]"
	echo
	echo "[ e ] Exit"
	echo
	echo "Choose an option:"
	echo

	read -r selection

	case "${selection}"
	in
		1)
			book_query
		;;

		2)
			book_details
		;;

		3)
			book_download
		;;

		e|E)
			exit 0
		;;

		*)
			echo "Invalid choice. Try again."
		;;

	esac
done
