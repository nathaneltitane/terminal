#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
		rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
		if [[ $(id -u -n) = "root" ]]
		then
				SUDO_HOME=/root

				USER="${SUDO_USER}"

				HOME=/home/"${USER}"
		fi

		if [[ -z $(command -v curl) ]]
		then
				yes | apt-get install curl
		fi

		if [ ! -d "${HOME}"/.local/bin ]
		then
				mkdir -p "${HOME}"/.local/bin
		fi

		curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

		chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

# frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="02-03-2025"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

api_url="https://gutendex.com/books"

# functions ////////////////////////////////////////////////////////////////////

string_sanitize () {

	string="${1}"

	echo "${string}" | tr -d '"|/\:;,!?*<>{}_' | sed 's/  */ /g' | sed 's/^ *//;s/ *$//'
}

book_query () {

	frobulator.ipt "Enter search query [ author / title / subject ]"

	read -r query

	echo

	# url encode space characters

	query=$(echo "${query}" | sed 's/ /%20/g')

	frobulator.ipt "Enter language - press Enter to skip [ en / fr / es / .. ]"

	read -r language

	echo

	if [ -n "${language}" ]
	then
		api_call="${api_url}/?search=${query}&languages=${language}"
	else
		api_call="${api_url}/?search=${query}"
	fi

	results=$(curl -s "${api_call}") &

	frobulator.process "Querying${marker_elp}"


# 	if [ -n "${language}" ]
# 	then
# 		search_results_last=(
# 			$(echo "${results}" | jq -r '.results[].id | select(.languages[] | contains("'"${language}"'"))')
# 		)
#
# 	else
# 		search_results_last=(
# 			$(echo "${results}" | jq -r '.results[].id')
# 		)
#
# 	fi

	count=$(curl -s "${api_call}" | jq -r '.count')

	if [ "${count}" -eq 0 ]
	then
		frobulator.err "Matches" "[ ${count} ]"
		echo
	else
		frobulator.scs "Matches" "[ ${count} ]"
		echo

		frobulator.sep
		echo

		curl -s "${api_call}" | jq -r '
				.results[] | select(.languages[] | contains("'"${language}"'")) |
				"ID " + (.id|tostring) + ":" + "\n" +
				"    Title: " + .title + "\n" +
				"    Author: " + (.authors[].name // "Unknown") + "\n" +
				"    Language: " + (.languages | join(", ")) + "\n" +
				"    Download: " + (.formats."application/epub+zip" // "N/A") + "\n"
		'

		frobulator.sep
		echo

	fi
}

book_details () {

	frobulator.ipt "Enter book identifier:"

	read -r book_identifier

	echo

	frobulator.fwd "Fetching details${marker_elp}"
	echo

	response=$(curl -s "${api_url}/${book_identifier}/")

	formats=$(echo "$response" | jq -r '.formats | to_entries[] | "    " + "- " + (.key | sub("^application/"; "")) + "\t" + "\t[ " + .value + " ]"')

	curl -s "${api_url}${book_identifier}/" | jq -r '
			"Title: " + .title + "\n" +
			"Author: " + (.authors[].name // "Unknown") + "\n" +
			"Subjects: " + "\n" + "    - " + (.subjects | join("\n    - ")) + "\n"
	' &

	frobulato.inf "Available formats:"
	echo

	echo "${formats}"
}

book_download () {

	frobulator.ipt "Enter Book identifier(s) separated by spaces or type 'all' to download last query results:"
	echo

	read -r -a book_identifiers

	if [ "${book_identifiers[0]}" = "all" ]
	then
		if [ ${#search_results_last[@]} -eq 0 ]
		then
			frobulator.err "No previous search results stored or found."
			echo

			return
		fi

		book_identifiers=("${search_results_last[@]}")
	fi

	for book_identifier in "${book_identifiers[@]}"
	do
		frobulator.inf "Fetching book information" " [ ${book_identifier} ]"
		echo

		response=$(curl -s "${api_url}/${book_identifier}/")

		epub_url=$(echo "${response}" | jq -r '.formats."application/epub+zip"')

		title=$(echo "${response}" | jq -r '.title')
		author=$(echo "${response}" | jq -r '.authors[0].name')

		if [ "${epub_url}" = "null" ]
		then
			frobulator.err "No EPUB version available for book" "[ ${book_identifier} ]"
			echo

			continue
		fi

		author=$(string_sanitize "${author}")
		title=$(string_sanitize  "${title}")

		extension="epub"

		file="${author} - ${title}.${extension}"

		frobulator.fwd "Downloading" "[ ${file} ]"
		echo

		curl -s -L -o "${file}" "${epub_url}"

		frobulator.inf "Download complete" "[ ${file} ]"
		echo
	done
}


while true
do
	frobulator.sep
	echo

	echo "[ 1 ] Search for a book                  [ author | title | subject ]"
	echo "[ 2 ] Get book details                   [ id ]"
	echo "[ 3 ] Download book(s) (epub format)     [ id ]"
	echo
	echo "[ e ] Exit"
	echo

	frobulator.sep
	echo

	frobulator.ipt "Selection"

	read -r selection

	echo

	case "${selection}"
	in
		1)
			book_query
		;;

		2)
			book_details
		;;

		3)
			book_download
		;;

		e|E)
			exit 0
		;;

		*)
			echo "Invalid choice. Try again."
		;;

	esac
done
