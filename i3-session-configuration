#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="01-03-2025"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

frobulator.status () {

	# HTTP response status codes:

	# informational responses //////////////////////////////////////////////////

	# 100 continue:                            client can proceed
	# 101 switching protocols:                 server switching protocols
	# 102 processing:                          request received, status pending
	# 103 early hints:                         preload resources early

	# successful responses /////////////////////////////////////////////////////

	# 200 ok:                                  request successful
	# 201 created:                             new resource created
	# 202 accepted:                            request received, not processed
	# 203 non-authoritative:                   metadata from a copy
	# 204 no content:                          no content, headers updated
	# 205 reset content:                       reset document
	# 206 partial content:                     partial content sent
	# 207 multi-status:                        multiple resource statuses
	# 208 already reported:                    avoids repeated enumeration
	# 226 im used:                             result of manipulations applied

	# redirection messages /////////////////////////////////////////////////////

	# 300 multiple choices:                    choose one response
	# 301 moved permanently:                   resource permanently moved
	# 302 found:                               resource temporarily moved
	# 303 see other:                           get resource at another uri
	# 304 not modified:                        resource not modified
	# 307 temporary redirect:                  redirect, keep method
	# 308 permanent redirect:                  redirect, keep method

	# client error responses ///////////////////////////////////////////////////

	# 400 bad request:                         invalid request
	# 401 unauthorized:                        authentication required
	# 403 forbidden:                           access denied
	# 404 not found:                           resource not found
	# 405 method not allowed:                  method not supported
	# 406 not acceptable:                      no matching content
	# 408 request timeout:                     connection idle
	# 409 conflict:                            request conflicts with server
	# 410 gone:                                resource permanently deleted
	# 413 content too large:                   request body too large
	# 414 uri too long:                        uri too long
	# 415 unsupported media type:              media type not supported
	# 416 range not satisfiable:               range not satisfiable
	# 417 expectation failed:                  expectation failed
	# 418 im a teapot:                         not a teapot
	# 421 misdirected request:                 request misdirected
	# 429 too many requests:                   rate limiting exceeded
	# 431 header fields too large:             headers too large
	# 451 unavailable for legal reasons:       access denied by law

	# server error responses ///////////////////////////////////////////////////

	# 500 internal server error:              server error
	# 501 not implemented:                    method not implemented
	# 502 bad gateway:                        invalid gateway response
	# 503 service unavailable:                server unavailable
	# 504 gateway timeout:                    gateway timeout
	# 505 http version not supported:         http version not supported
	# 511 network authentication required:    network authentication required

	url="${@}"

	status_code="%{http_code}\n"

	url_status=$(curl									\
					--silent							\
					--output		"${sink}"			\
					--write-out 	"${status_code}"	\
														"${url}"
				)

	if [[ "${url_status}" = [1][0-9][0-9] ]]
	then
		url_status_label="information"

		frobulator.inf "Download status" "[ ${url_status_label} // ${url_status} ]"
		echo

		proceed=1

	elif [[ "${url_status}" = [2][0-9][0-9] ]]
	then
		url_status_label="success"

		frobulator.scs "Download status" "[ ${url_status_label} // ${url_status} ]"
		echo

		proceed=1

	elif [[ "${url_status}" = [3][0-9][0-9] ]]
	then
		url_status_label="redirection"

		frobulator.wrn "Download status" "[ ${url_status_label} // ${url_status} ]"
		echo

		proceed=1

	elif [[ "${url_status}" = [4][0-9][0-9] ]]
	then
		url_status_label="error"

		frobulator.err "Download status" "[ ${url_status_label} // ${url_status} ]"
		echo

		reason="client"

		proceed=0

	elif [[ "${url_status}" = [5][0-9][0-9] ]]
	then
		url_status_label="error"

		frobulator.err "Download status""[ ${url_status_label} // ${url_status} ]"
		echo

		reason="server"

		proceed=0
	fi

	echo $url
	echo $url_status
}

# download /////////////////////////////////////////////////////////////////////

# use to download file(s) with url status verification from argument or array list

# usage:      frobulator.download "[url]"                    "[directory]"             "[item]" | "[array]"
#             frobulator.download "[url]"/"[item]"           "[directory]"/"[item]"
#             frobulator.download "[url]"/"[source item]"    "[directory]"/"[item]"

frobulator.download () {

	url="${1}"

	frobulator.status "${url}"

	unset $url_status

	if [[ "${proceed}" = 0 ]]
	then

		frobulator.err "Download error" "[ response // ${url_status} ]"
		frobulator.nul "Cannot continue - ${reason} unavailable."
		echo

		frobulator.stp "Aborting${marker_elp}"
		echo

		return 1

	else

		if [ $# -eq 2 ]
		then
			path="${PWD}"

			if [[ -n "${#list[@]}" ]]
			then
				# ${2} - array

				list=(${@:2})
			else
				file="${2}"

				list=()

				list+=("${file}")
			fi

		elif [ $# -eq 3 ]
		then
			path="${2}"

			if [[ -n "${#list[@]}" ]]
			then
				# ${3} - array

				list=(${@:3})
			else
				file="${3}"

				list=()

				list+=("${file}")
			fi

		elif [ $# -eq 4 ]
		then
			source_file="${2}"
			path="${3}"

			if [ -z "${path}" ]
			then
				path="${PWD}"
			fi

			if [[ -n "${#list[@]}" ]]
			then
				# ${4} - array

				list=(${@:4})
			else
				file="${4}"

				list=()

				list+=("${file}")
			fi

		else
			path="${2}"

			if [ -z "${path}" ]
			then
				path="${PWD}"
			fi

			if [[ -n "${#list[@]}" ]]
			then
				# ${3} - array

				list=(${@:3})
			else
				file="${3}"

				list=()

				list+=("${file}")
			fi
		fi
	fi

	for file in ${list[@]}
	do
		if [ $# -eq 2 ]
		then
			url="${url}"

		elif [ $# -eq 3 ]
		then
			url="${url}"/"${file}"

		elif [ $# -eq 4 ]
		then
			url="${url}"/"${source_file}"
		else
			url="${url}"/"${file}"
		fi

		url_status=$(curl --silent --location "${url}" | cut -d ':' -f 1)

		if [[ "${url_status}" = [1][0-9][0-9] ]]
		then
			url_status_label="information"

			frobulator.inf "Download status" "[ ${url_status_label} // ${url_status} ]"
			echo

			proceed=1

		elif [[ "${url_status}" = [2][0-9][0-9] ]]
		then
			url_status_label="success"

			frobulator.scs "Download status" "[ ${url_status_label} // ${url_status} ]"
			echo

			proceed=1

		elif [[ "${url_status}" = [3][0-9][0-9] ]]
		then
			url_status_label="redirection"

			frobulator.wrn "Download status" "[ ${url_status_label} // ${url_status} ]"
			echo

			proceed=1

		elif [[ "${url_status}" = [4][0-9][0-9] ]]
		then
			url_status_label="error"

			frobulator.err "Download status" "[ ${url_status_label} // ${url_status} ]"
			echo

			reason="client"

			proceed=0

		elif [[ "${url_status}" = [5][0-9][0-9] ]]
		then
			url_status_label="error"

			frobulator.err "Download status""[ ${url_status_label} // ${url_status} ]"
			echo

			reason="server"

			proceed=0
		fi

		echo $url_status
		echo $url

		if [[ "${proceed}" = 1 ]]
		then
			if [ ! -d "${path}" ]
			then
				mkdir			\
					--parents	\
								"${path}"
			fi

			if [ $# -eq 2 ]
			then
				curl			\
					--silent	\
					--location	\
								"${url}" > "${path}"/"${file}" &

			elif [ $# -eq 3 ]
			then
				curl			\
					--silent	\
					--location	\
								"${url}"/"${file}" > "${path}"/"${file}" &

			elif [ $# -eq 4 ]
			then
				curl			\
					--silent	\
					--location	\
								"${url}"/"${source_file}" > "${path}"/"${file}" &

			else
				curl			\
					--silent	\
					--location	\
								"${url}"/"${file}" > "${path}"/"${file}" &
			fi

			frobulator.progress "download" "[ '${file}' ]"

			# set permissions

			chmod a+rx "${path}"/"${file}"

		elif [[ "${proceed}" = 0 ]]
		then
			frobulator.err "File does not exist" "[ ${file} // ${url_status} ]"
			echo

		fi

	done

	# unset array

	list=()

	return 0

	unset proceed
}

# requirements /////////////////////////////////////////////////////////////////

i3_list+=(
	i3
	i3status
)

i3_addons_list+=(
	dmenu
	feh
	rofi
	stterm
	qiv
)

install_list+=(
	${i3_list[@]}
	${i3_addons_list[@]}
)

# frobulator.install ${install_list[@]}

install_list=()

# load interface files

interface_list+=(
# 	i3-configuration
# 	i3status-configuration
# 	i3-backgrounds
# 	i3-confirm
# 	i3-directory
# 	i3-exit
# 	i3-file
# 	i3-file-manager
# 	i3-launch
# 	i3-lookup
# 	i3-manual
# 	i3-navigation
# 	i3-notes
	i3-processes
 	i3-shortcuts
 	i3-status
	i3-template
	poop
)

frobulator.download get.trmnl.me "${HOME}"/.local/bin ${interface_list[@]}

interface_list=()

# link configuration files

# frobulator.link "${HOME}"/.local/bin "${HOME}"/.config/i3          i3-configuration          config
# frobulator.link "${HOME}"/.local/bin "${HOME}"/.config/i3status    i3status-configuration    config

