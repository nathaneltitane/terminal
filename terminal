#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	if [[ $(id -u -n) = "root" ]]
	then
		chown "${USER}":"${USER}" "${HOME}"/.local/*

		chmod -R 777 "${HOME}"/.local/*
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

export self_arguments="${@}"

frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="03-16-2023"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

# system update ////////////////////////////////////////////////////////////////

frobulator.update

frobulator.upgrade

# requirements /////////////////////////////////////////////////////////////////

# install

list=(
	cura
	docker.io
	git
	htop
	hub
	nano
	pip
	puddletag
	python3-pip
	tree
	mesa-utils
	vulkan-tools
	wayland-utils
)

kde_list=(
	breeze
	breeze-cursor-theme
	breeze-gtk-theme
	breeze-icon-theme
	calligra
	cantata
	dolphin
	elisa
	flatpak
	gwenview
	karbon
	kate
	kcalc
	kcharselect
	kcolorchooser
	kde-config-cron
	kde-config-flatpak
	kdenlive
	kio-gdrive
	konsole
	kontrast
	krename
	krita
	kup-backup
	mpd
	plasma-discover
	plasma-discover-backend-flatpak
	plasma-discover-backend-fwupd
	sweeper
)

if [[ $(echo "${XDG_CURRENT_DESKTOP}") = [kK][dD][eE] ]]
then
	list+=(
		${kde_list[@]}
	)
fi

frobulator.assess ${list[@]}

list=()

# remove

list=(
	htop.desktop
)

frobulator.delete /usr/share/applications ${list[@]}

list=()

# flatpak //////////////////////////////////////////////////////////////////////

flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

# storage //////////////////////////////////////////////////////////////////////

# windows subsystem for linux

if [ -d /mnt/wsl* ]
then
	frobulator.link /mnt /media y internal
	frobulator.link /mnt /media z external
fi

# linux subsystem for chromeos

if [ -d /mnt/chromeos ]
then

	if [ -d /mnt/chromeos/GoogleDrive ]
	then
		frobulator.link /mnt/chromeos /media GoogleDrive Drive
	fi

	if [ -d /mnt/chromeos/MyFiles ]
	then
		frobulator.link /mnt/chromeos/MyFiles "${HOME}" Downloads Downloads
	fi

	if [ -d /mnt/chromeos/removable ]
	then
		frobulator.link /mnt/chromeos/removable /media Internal Internal
		frobulator.link /mnt/chromeos/removable /media External External
	fi

fi

# android subsystem for chromeos

if [ -d /opt/google/containers/android ]
then

	if [ -d /opt/google/containers/android/rootfs/android-data/data/media ]
	then
		frobulator.link /opt/google/containers/android/rootfs/android-data/data/media /media 0 Android
	fi

fi

# home /////////////////////////////////////////////////////////////////////////

frobulator.file "${HOME}" .hushlogin


if [[ "${HOSTNAME}" = [pP][eE][nN][gG][uU][iI][nN] ]]
then
	# generate home directory structure

	directories_list+=(
		Desktop
		Documents
		Downloads
		Music
		Pictures
		Public
		Templates
		Videos
	)

	frobulator.directory "${HOME}" ${directories_list[@]}

	directories_list=()

fi

# git //////////////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ git ]"
echo

storage_list=(
	/media/[aA]ndroid
	/media/[iI]nternal
)

for storage in ${storage_list[@]}
	do
	if [ -d "${storage}" ]
	then
		frobulator.link "${storage}"/Git "${HOME}" git-configuration .gitconfig

		chown "${USER}":"${USER}" "${storage}"/Git/git-configuration

		frobulator.link "${storage}"/Git "${HOME}" git-credentials   .git-credentials

		chown "${USER}":"${USER}" "${storage}"/Git/git-credentials
	fi
done

# python ///////////////////////////////////////////////////////////////////////


if [[ "${HOSTNAME}" = [pP][eE][nN][gG][uU][iI][nN] ]]
then
	frobulator.inf "Setting up" "[ python ]"
	echo

	python_directory="/usr/lib/python3.11"

	frobulator.delete "${python_directory}" EXTERNALLY-MANAGED
fi

# shell ////////////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ shell ]"
echo

frobulator.directory "${HOME}" .local/bin

list+=(
	bash-aliases
	bash-configuration
	bash-functions
	bash-login
	bash-logout
	bash-profile
)

frobulator.download get.trmnl.me "${HOME}"/.local/bin ${list[@]}

frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-aliases       .bash_aliases
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-configuration .bashrc
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-configuration .bash_configuration
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-functions     .bash_functions
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-login         .bash_login
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-logout        .bash_logout
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-profile       .bash_profile

frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-aliases       .bash_aliases
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-configuration .bashrc
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-configuration .bash_configuration
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-functions     .bash_functions
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-login         .bash_login
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-logout        .bash_logout
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-profile       .bash_profile

if [[ $(id -u -n) = "root" ]]
then
	for item in ${list[@]}
	do
		chown "${SUDO_USER}":"${SUDO_USER}" "${HOME}"/.local/bin/"${item}"

		chmod 777 "${HOME}"/.local/bin/"${item}"
	done
fi

list=()

# superuser ////////////////////////////////////////////////////////////////////

frobulator.write  "${SUDO_USER} ALL=(ALL) NOPASSWD: ALL" /etc sudoers

# themes ///////////////////////////////////////////////////////////////////////

if [[ "${HOSTNAME}" = [pP][eE][nN][gG][uU][iI][nN] ]]
then
	frobulator.inf "Setting up" "[ themes ]"
	echo

	echo 'gtk-icon-theme-name = "Breeze"'  > /etc/gtk-2.0/gtkrc
	echo 'gtk-theme-name = "Breeze"'      >> /etc/gtk-2.0/gtkrc
	echo 'gtk-font-name = "Noto Mono 10"' >> /etc/gtk-2.0/gtkrc

	echo '[Settings]'                      > /etc/gtk-3.0/settings.ini
	echo 'gtk-cursor-theme-name = Breeze' >> /etc/gtk-3.0/settings.ini
	echo 'gtk-icon-theme-name = Breeze'   >> /etc/gtk-3.0/settings.ini
	echo 'gtk-theme-name = Breeze'        >> /etc/gtk-3.0/settings.ini
	echo 'gtk-font-name = Noto Mono 10'   >> /etc/gtk-3.0/settings.ini

	echo '[Qt]'                             > /etc/xdg/Trolltech.conf
	echo 'style=Breeze'                    >> /etc/xdg/Trolltech.conf

	frobulator.scs 'Done'
	echo
fi

# applications /////////////////////////////////////////////////////////////////

if [[ "${HOSTNAME}" = [pP][eE][nN][gG][uU][iI][nN] ]]
then
	frobulator.inf "Setting up" "[ applications ]"
	echo

	# install

	list+=(
		${kde_list[@]}
	)

	frobulator.assess ${list[@]}

	list=()

	# remove

	list=(
		org.kde.dolphin.desktop
		org.kde.konsole.desktop
	)

	frobulator.delete /usr/share/applications ${list[@]}

	list=()

	# uninstall

	list=(
		uxterm
		vim
		xterm
	)

	frobulator.purge ${list[@]}

	list=()
fi

# runner

kwriteconfig5						\
	--file kwinrc					\
	--group ModifierOnlyShortcuts	\
	--key Meta						\
									"org.kde.krunner,/App,,toggleDisplay"

qdbus org.kde.KWin /KWin reconfigure

frobulator.scs 'Done'
echo

# efi /////////////////////////////////////////////////////////////////////////

if [ -e /sys/firmware/efi ]
then

	# install

	list=(
		refind
	)

	frobulator.install ${list[@]}

	list=()

	refind-install --yes

	# purge

	apt purge grub* > "${sink}" 2>&1

	list=(
		grub
	)

	frobulator.delete /boot ${list[@]}

	list=()

	# remove

	list=(
		refind.conf
	)

	frobulator.delete /boot/efi/EFI/refind	${list[@]}

	frobulator.download get.trmnl.me refind-configuration /boot/efi/EFI/refind refind.conf

	frobulator.download get.trmnl.me /boot/efi/EFI/refind/themes archive-refind-theme.tar.gz

	frobulator.extract /boot/efi/EFI/refind/themes/archive-refind-theme.tar.gz /boot/efi/EFI/refind/themes

	rm -r -f /boot/efi/EFI/refind/themes/archive-refind-theme.tar.gz
fi

