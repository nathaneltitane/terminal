#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [ -f "${HOME}"/.local/bin/frobulator ]
then
	rm -r -f "${HOME}"/.local/bin/frobulator
fi

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	if [[ $(id -u -n) = "root" ]]
	then
		chown "${USER}":"${USER}" "${HOME}"/.local/*

		chmod -R 777 "${HOME}"/.local/*
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# superuser ////////////////////////////////////////////////////////////////////

frobulator.escalate

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="05-01-2023"

# usage ////////////////////////////////////////////////////////////////////////

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"

# variables ////////////////////////////////////////////////////////////////////

storage_directory=/media

# defaults /////////////////////////////////////////////////////////////////////

# functions ////////////////////////////////////////////////////////////////////

# system update ////////////////////////////////////////////////////////////////

frobulator.update

frobulator.upgrade

# requirements /////////////////////////////////////////////////////////////////

list=(
	git
	hub
	nano
	pip
	python3-pip
)

frobulator.assess ${list[@]}

list=()

# home /////////////////////////////////////////////////////////////////////////

frobulator.file "${HOME}" .hushlogin

# storage //////////////////////////////////////////////////////////////////////

# windows subsystem for linux

if [ -d "/mnt/wsl*" ]
then
	frobulator.link /mnt /media y internal
	frobulator.link /mnt /media z external
fi

# linux subsystem for chromeos

if [ -d /mnt/chromeos/removable ]
then
	frobulator.link /mnt/chromeos/removable /media Internal internal
	frobulator.link /mnt/chromeos/removable /media External external
fi

list=()

# git //////////////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ git ]"
echo

storage="${storage_directory}"/internal

if [ -d "${storage}" ]
then
	frobulator.link "${storage}"/Git "${HOME}" git-configuration .gitconfig

	chown "${USER}":"${USER}" "${storage}"/Git/git-configuration

	frobulator.link "${storage}"/Git "${HOME}" git-credentials   .git-credentials

	chown "${USER}":"${USER}" "${storage}"/Git/git-credentials
fi

# python ///////////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ python ]"
echo

python_directory="/usr/lib/python3.11"

frobulator.delete "${python_directory}" EXTERNALLY-MANAGED

# shell ////////////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ shell ]"
echo

frobulator.directory "${HOME}" .local/bin

list+=(
	bash-aliases
	bash-configuration
	bash-functions
	bash-login
	bash-logout
	bash-profile
)

frobulator.download get.trmnl.me "${HOME}"/.local/bin ${list[@]}

frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-aliases       .bash_aliases
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-configuration .bashrc
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-configuration .bash_configuration
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-functions     .bash_functions
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-login         .bash_login
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-logout        .bash_logout
frobulator.link "${HOME}"/.local/bin "${HOME}"      bash-profile       .bash_profile

frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-aliases       .bash_aliases
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-configuration .bashrc
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-configuration .bash_configuration
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-functions     .bash_functions
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-login         .bash_login
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-logout        .bash_logout
frobulator.link "${HOME}"/.local/bin "${SUDO_HOME}" bash-profile       .bash_profile

if [[ $(id -u -n) = "root" ]]
then
	for item in ${list[@]}
	do
		chown "${SUDO_USER}":"${SUDO_USER}" "${HOME}"/.local/bin/"${item}"

		chmod 777 "${HOME}"/.local/bin/"${item}"
	done
fi

list=()

# themes ///////////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ themes ]"
echo

if [[ "${HOSTNAME}" = [pP][eE][nN][gG][uU][iI][nN] ]]
then

    echo 'gtk-icon-theme-name = "Breeze"'  > /etc/gtk-2.0/gtkrc
    echo 'gtk-theme-name = "Breeze"'      >> /etc/gtk-2.0/gtkrc
    echo 'gtk-font-name = "Noto Sans 10"' >> /etc/gtk-2.0/gtkrc

    echo '[Settings]'                      > /etc/gtk-3.0/settings.ini
    echo 'gtk-cursor-theme-name = Breeze' >> /etc/gtk-3.0/settings.ini
    echo 'gtk-icon-theme-name = Breeze'   >> /etc/gtk-3.0/settings.ini
    echo 'gtk-theme-name = Breeze'        >> /etc/gtk-3.0/settings.ini
    echo 'gtk-font-name = Noto Sans 10'   >> /etc/gtk-3.0/settings.ini

    echo '[Qt]'                             > /etc/xdg/Trolltech.conf
    echo 'style=Breeze'                    >> /etc/xdg/Trolltech.conf

fi

frobulator.scs 'Done'
echo

# applications /////////////////////////////////////////////////////////////////

frobulator.inf "Setting up" "[ themes ]"
echo

if [[ "${HOSTNAME}" = [pP][eE][nN][gG][uU][iI][nN] ]]
then

	# install

	list=(
		breeze
		breeze-cursor-theme
		breeze-icon-theme
		breeze-gtk-theme
		cura
		dolphin
		gwenview
		kate
		kcharselect
		konsole
		konqueror
		krename
		puddletag
	)

	frobulator.assess ${list[@]}

	list=()

	#remove

	list=(
		org.kde.dolphin.desktop
		org.kde.konsole.desktop
	)

	frobulator.delete /usr/share/applications ${list[@]}

	list=()

	# uninstall

	list=(
		uxterm
		vim
		xterm
	)

	frobulator.purge ${list[@]}

	list=()

fi
